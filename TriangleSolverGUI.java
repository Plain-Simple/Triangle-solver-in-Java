import javax.swing.JFrame;
public class TriangleSolver extends JFrame {
    public TriangleSolver() {
        initComponents();
    }
    @SuppressWarnings("unchecked") /// not quite sure what this does - auto-generated by NetBeans
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        sides_header = new javax.swing.JLabel();
        side_A_label = new javax.swing.JLabel();
        side_B_label = new javax.swing.JLabel();
        side_C_label = new javax.swing.JLabel();
        side_A = new javax.swing.JTextField();
        side_B = new javax.swing.JTextField();
        side_C = new javax.swing.JTextField();
        angle_a_label = new javax.swing.JLabel();
        angle_b_label = new javax.swing.JLabel();
        angle_c_label = new javax.swing.JLabel();
        angle_a = new javax.swing.JTextField();
        angle_b = new javax.swing.JTextField();
        angle_c = new javax.swing.JTextField();
        calculate_button = new javax.swing.JButton();
        clearboxes_button = new javax.swing.JButton();
        angles_header = new javax.swing.JLabel();
        error_message = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Plain+Simple Triangle Solver");

        sides_header.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        sides_header.setText("Sides");

        side_A_label.setText("A");

        side_B_label.setText("B");

        side_C_label.setText("C");

        angle_a_label.setText("a");

        angle_b_label.setText("b");

        angle_c_label.setText("c");

        calculate_button.setText("Calculate!");
        calculate_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate_buttonActionPerformed(evt);
            }
        });

        clearboxes_button.setText("Clear Boxes");
        clearboxes_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearboxes_buttonActionPerformed(evt);
            }
        });

        angles_header.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        angles_header.setText("Angles");

        error_message.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        error_message.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(side_C_label)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(side_A_label)
                                                .addComponent(side_B_label)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(side_C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(side_B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(side_A, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(angle_a_label)
                                        .addComponent(angle_b_label)
                                        .addComponent(angle_c_label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(angle_a, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(angle_b, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(angle_c, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(error_message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sides_header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(calculate_button, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(clearboxes_button)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(angles_header)
                                .addGap(44, 44, 44))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {angles_header, sides_header});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {angle_a, angle_b, angle_c, side_A, side_B, side_C});

        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(sides_header, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(angles_header))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(side_A_label)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(angle_a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(angle_a_label)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(side_B_label)
                                                        .addComponent(angle_b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(angle_b_label))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(side_C_label)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(angle_c, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(angle_c_label))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(side_A, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(side_B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(side_C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(clearboxes_button)
                                        .addComponent(calculate_button))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(error_message, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {angles_header, sides_header});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {angle_a, angle_b, angle_c, side_A, side_B, side_C});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {calculate_button, clearboxes_button});

        pack();
    }// </editor-fold>                        

    private void calculate_buttonActionPerformed(java.awt.event.ActionEvent evt) {
        double[] triangle = new double[6];
        boolean error = false; /* true if there was an error solving */
        if(angle_a.getText().equals("")) /* left empty */
            triangle[0] = 0;
        else
            triangle[0] = Double.parseDouble(angle_a.getText());
        if(angle_b.getText().equals(""))
            triangle[2] = 0;
        else
            triangle[2] = Double.parseDouble(angle_b.getText());
        if(angle_c.getText().equals(""))
            triangle[4] = 0;
        else
            triangle[4] = Double.parseDouble(angle_c.getText());
        if(side_A.getText().equals(""))
            triangle[1] = 0;
        else
            triangle[1] = Double.parseDouble(side_A.getText());
        if(side_B.getText().equals(""))
            triangle[3] = 0;
        else
            triangle[3] = Double.parseDouble(side_B.getText());
        if(side_C.getText().equals(""))
            triangle[5] = 0;
        else
            triangle[5] = Double.parseDouble(side_C.getText());
        triangle = Solve(triangle);
        for(int i = 0; i < 6; i++)
            if(triangle[i] == 0) {
                error = true;
                /// how can we improve this?
                error_message.setText("Error: Triangle could not be solved.");
            }
        if(!(error)) { /* triangle was solved successfully */
            side_A.setText(Double.toString(triangle[1]));
            side_B.setText(Double.toString(triangle[3]));
            side_C.setText(Double.toString(triangle[5]));
            angle_a.setText(Double.toString(triangle[0]));
            angle_b.setText(Double.toString(triangle[2]));
            angle_c.setText(Double.toString(triangle[4]));
        }

    }
    /* clears the input boxes */
    private void clearboxes_buttonActionPerformed(java.awt.event.ActionEvent evt) {
        side_A.setText("");
        side_B.setText("");
        side_C.setText("");
        angle_a.setText("");
        angle_b.setText("");
        angle_c.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TriangleSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TriangleSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TriangleSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TriangleSolver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TriangleSolver().setVisible(true);
            }
        });
    }
    static double sin(double degrees) {
        return Math.sin(Math.toRadians(degrees));
    }
    static double cos(double degrees) {
        return Math.cos(Math.toRadians(degrees));
    }
    static double asin(double degrees) {
        return Math.asin(Math.toRadians(degrees));
    }
    static double acos(double degrees) {
        return Math.acos(Math.toRadians(degrees));
    }
    static double pow(double base, double exponent) {
        return Math.pow(base, exponent);
    }
    static double sqrt(double number) {
        return Math.sqrt(number);
    }
    static double[] SolveLastAngle(double triangle[]) {
        for (int i = 0; i < 6; i+=2) {
            if (triangle[i] == 0) {
                triangle[i] = 180 - (triangle[(i+2) % 6] + triangle[(i-2) % 6]);
                return triangle;
            }
        }
        return triangle;
    }

    static double GetSideToAngleRatio(double triangle[]) {
        for (int i = 0; i < 6; i += 2) {
            if (triangle[i] > 0 && triangle[(i + 3) % 6] > 0) {
                return triangle[(i + 3) % 6] / sin(triangle[i]);
            }
        }
        return 0;
    }

    static double GetAngleToSideRatio(double triangle[]) {
        for (int i = 0; i < 6; i += 2) {
            if (triangle[i] > 0 && triangle[(i + 3) % 6] > 0) {
                return sin(triangle[i]) / triangle[(i + 3) % 6];
            }
        }
        return 0;
    }

    static double[] SolveMissingSideLOS(double triangle[], int missing_side) {
        triangle[missing_side] =
                GetSideToAngleRatio(triangle) * sin(triangle[(missing_side + 3) % 6]);
        return triangle;
    }

    static double[] SolveMissingAngleLOS(double triangle[], int missing_angle) {
        triangle[missing_angle] =
                asin(GetAngleToSideRatio(triangle) * triangle[(missing_angle + 3) % 6]);
        return triangle;
    }

    static double[] SolveMissingSideLOC(double triangle[], int missing_side) {
        triangle[missing_side] = sqrt(
                pow(triangle[(missing_side + 2) % 6], 2) + /* a^2 */
                        pow(triangle[(missing_side - 2) % 6], 2) - /* b^2 */
                        (2 * triangle[(missing_side + 2) % 6] * triangle[(missing_side - 2) % 6] *
                                cos(triangle[(missing_side + 3) % 6]))); /* 2ab*cosC */
        return triangle;
    }

    static double[] SolveMissingAngleLOC(double triangle[], int missing_angle) {
        triangle[missing_angle] =
                acos(
         /* a^2 + b^2 - c^2 */
                        (pow(triangle[(missing_angle + 1) % 6], 2) +
                                pow(triangle[(missing_angle + 5) % 6], 2) -
                                pow(triangle[(missing_angle + 3) % 6], 2)) /
         /* 2ab */
                                (2 * triangle[(missing_angle + 1) % 6] * triangle[(missing_angle + 5) % 6]));
        return triangle;
    }

    static double[] Solve(double triangle[]) {
        for (int i = 0; i < 6; i += 2) {
      /* if 2 angles are solved but angle i is not */
            if (triangle[i] == 0 && triangle[(i + 2) % 6] > 0 && triangle[(i - 2) % 6] > 0) {
                triangle = SolveLastAngle(triangle);
                i = 0;
        /* if all sides are known, but angle i isn't */
            } else if (triangle[1] > 0 && triangle[3] > 0 && triangle[5] > 0 && triangle[i] == 0) {
                triangle = SolveMissingAngleLOC(triangle, i);
                i = 0;
            } else if (triangle[(i - 1) % 6] > 0 && triangle[(i - 2) % 6] > 0 &&
                    triangle[(i - 3) % 6] > 0 && triangle[(i + 1) % 6] == 0) {
                triangle = SolveMissingSideLOC(triangle, (i + 1));
                i = 0;
            } else if (((triangle[i + 1] > 0 && triangle[(i + 4) % 6] > 0) ||
                    (triangle[(i - 1) % 6] > 0 && triangle[(i - 4) % 6] > 0)) &&
                    triangle[i] == 0) {
                triangle = SolveMissingAngleLOS(triangle, i);
                i = 0;
            } else if (((triangle[(i + 2) % 6] > 0 && triangle[(i + 5) % 6] > 0) ||
                    (triangle[i] > 0 && triangle[(i - 3) % 6] > 0)) &&
                    triangle[i + 1] == 0) {
                triangle = SolveMissingSideLOS(triangle, (i + 1));
                i = 0;
            }
        }
        return triangle;
    }


    // Variables declaration - do not modify                     
    private javax.swing.JTextField angle_a;
    private javax.swing.JLabel angle_a_label;
    private javax.swing.JTextField angle_b;
    private javax.swing.JLabel angle_b_label;
    private javax.swing.JTextField angle_c;
    private javax.swing.JLabel angle_c_label;
    private javax.swing.JLabel angles_header;
    private javax.swing.JButton calculate_button;
    private javax.swing.JButton clearboxes_button;
    private javax.swing.JLabel error_message;
    private javax.swing.JTextField side_A;
    private javax.swing.JLabel side_A_label;
    private javax.swing.JTextField side_B;
    private javax.swing.JLabel side_B_label;
    private javax.swing.JTextField side_C;
    private javax.swing.JLabel side_C_label;
    private javax.swing.JLabel sides_header;
    // End of variables declaration                   
}
